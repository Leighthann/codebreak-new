# MongoDB Atlas Integration with CodeBreak Backend

This document explains how MongoDB Atlas interacts with the server.py, auth.py, and db.py files in the CodeBreak game backend.

## Understanding the Connection Flow

```
[MongoDB Atlas] <---> [db.py] <---> [server.py & auth.py] <---> [Game Client]
```

MongoDB Atlas serves as your remote database, replacing a local MongoDB installation. The connection and data flow remain the same, but instead of connecting to `localhost`, your application connects to the Atlas cloud service.

## db.py Integration

The `db.py` file is the primary point of MongoDB Atlas integration. This file handles the database connection and defines all database operations.

### Key Changes for Atlas:

```python
from motor.motor_asyncio import AsyncIOMotorClient
from pydantic import BaseModel, Field
from typing import Dict, List, Optional
from datetime import datetime
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# MongoDB connection (use environment variables for Atlas)
MONGO_URL = os.getenv("MONGO_URL", "mongodb://localhost:27017/")
client = AsyncIOMotorClient(MONGO_URL)
db = client["codebreak_db"]
```

### What's Happening:

1. The `dotenv` library loads the MongoDB Atlas connection string from your `.env` file
2. `motor` creates an async connection to Atlas using this string
3. All database operations continue to use this connection

No other changes are needed in `db.py` - all the collection definitions and database operations remain the same. The driver handles the connectivity details.

## server.py Integration

The `server.py` file doesn't need direct modifications to work with Atlas, as it imports database functionality from `db.py`:

```python
# Import database models and functions
from db import (
    PlayerModel, LeaderboardEntry, GameSession, Item,
    get_player, create_or_update_player, update_player_position,
    add_to_leaderboard, get_top_leaderboard, record_game_session,
    spawn_item, collect_item, create_indexes, db
)
```

### What's Happening:

1. `server.py` imports the database client and functions from `db.py`
2. FastAPI endpoints call these functions to interact with MongoDB Atlas
3. The connection details are abstracted away by the `db.py` module

## auth.py Integration

The `auth.py` file mainly handles JWT authentication but does interact with the database for user authentication:

```python
async def get_user(username: str, db):
    user = await db["users"].find_one({"username": username})
    if user:
        return UserInDB(**user)

async def authenticate_user(username: str, password: str, db):
    user = await get_user(username, db)
    if not user:
        return False
    if not verify_password(password, user.hashed_password):
        return False
    return user
```

### What's Happening:

1. The `db` parameter is passed from `server.py` to `auth.py` functions
2. This parameter contains the MongoDB Atlas connection from `db.py`
3. User authentication queries run against the Atlas database

## Dependency Flow in the Application

1. **Environment Setup**: `.env` file contains the Atlas connection string
2. **Database Connection**: `db.py` establishes the connection to Atlas
3. **API Layer**: `server.py` uses the connection for game state operations
4. **Authentication**: `auth.py` uses the connection for user operations
5. **Client**: The game connects to the FastAPI server, not directly to Atlas

## Security Considerations

- Atlas requires whitelisted IP addresses (or "Allow Access from Anywhere" for development)
- The connection string contains your database username and password
- Keep the `.env` file secure and don't commit it to public repositories
- Atlas offers more security options (VPC peering, private endpoints) for production environments

## Database Collections in Atlas

With this setup, these collections will be created in your Atlas database:

- `users`: User authentication information
- `players`: Player state and inventory
- `leaderboard`: High scores and player achievements
- `game_sessions`: Record of gameplay sessions
- `items`: In-game items and their states

You can view these collections directly in the MongoDB Atlas dashboard by clicking "Browse Collections" on your cluster page.

## Monitoring and Scaling

One advantage of Atlas is built-in monitoring:

- Performance metrics are visible in the Atlas dashboard
- Query statistics show database usage patterns
- Auto-scaling options for increased player load
- Database alerts can be set up for issues

## Migrating from Local to Atlas

If you've been using a local MongoDB instance:

1. Create a MongoDB Atlas account and cluster
2. Export data from your local MongoDB (if needed)
3. Import data to Atlas using MongoDB Compass or the Atlas UI
4. Update your `.env` file with the Atlas connection string
5. Restart your application

No code changes are required in your Python files.